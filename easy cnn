import torch
import torch.nn as nn
from torch.autograd import Variable
import torch.utils.data as Data
import torchvision
import matplotlib.pyplot as plt

#torch.manual_seed(1)
#设置人工变量

EPOCH = 1  #训练批数
BATCH_SIZE = 50   #训练包的大小
LR = 0.001  #学习速率
DOWNLOAD_MNIST = True   #判断样本是不是train样本

# 获取数据
training_data = torchvision.datasets.MNIST(
    root='./data/',    #路径
    train=True,
    transform=torchvision.transforms.ToTensor(),  #处理样本
    download=DOWNLOAD_MNIST,  #下载数据
)
# 导入数据
train_loader = Data.DataLoader(dataset=training_data, batch_size=BATCH_SIZE,
                               shuffle=True)

test_data = torchvision.datasets.MNIST(root='./data/', train=False)
test_x = Variable(torch.unsqueeze(test_data.data, dim=1),
                  volatile=True).type(torch.FloatTensor)[:2000] / 255
test_y = test_data.targets[:2000]

#设置模型
class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        #第一层
        self.conv1 = nn.Sequential(  # (1,28,28)
            nn.Conv2d(in_channels=1, out_channels=16, kernel_size=5,
                      stride=1, padding=2),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )
        #第二层
        self.conv2 = nn.Sequential(
            nn.Conv2d(16, 32, 5, 1, 2),
            nn.ReLU(),
            nn.MaxPool2d(2)  # (32,7,7)
        )
        #全连接层
        self.out = nn.Linear(32 * 7 * 7, 10)

    #前向算法
    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = x.view(x.size(0), -1)  # 将（batch，32,7,7）展平为（batch，32*7*7）
        output = self.out(x)
        return output

#创建实例
cnn = CNN()
optimizer = torch.optim.Adam(cnn.parameters(), lr=LR)
loss_function = nn.CrossEntropyLoss()

#训练模型
for epoch in range(EPOCH):
    for step, (x, y) in enumerate(train_loader):
        x_x = Variable(x)
        x_y = Variable(y)

        output = cnn(x_x)
        loss = loss_function(output, x_y)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        #输出中间数据
        if step % 50 == 0:
            test_output = cnn(test_x)
            pred_y = torch.max(test_output, 1)[1].squeeze()
            s1=sum(pred_y == test_y)
            s2=test_y.size(0)
            accuracy = s1/(s2*1.0)
            print('Epoch:', epoch, '|Step:', step,
                      '|train loss:%.4f' % loss.item(), '|accuracy:%.4f' % accuracy)

#输出测试结果
test_output = cnn(test_x[:10])
pred_y = torch.max(test_output, 1)[1].numpy().squeeze()
print(pred_y, 'prediction number')
print(test_y[:10].numpy(), 'real number')
